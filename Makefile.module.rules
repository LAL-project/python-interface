###########################################################################
#
#    SWIG-generated python wrapper for the Linear Arrangement Library
#    Copyright (C) 2021 Lluís Alemany Puig
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published
#    by the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program. If not, see <https://www.gnu.org/licenses/>.
#
#    Contact:
#
#       Lluís Alemany Puig (lalemany@cs.upc.edu)
#           LARCA (Laboratory for Relational Algorithmics, Complexity and Learning)
#           CQL (Complexity and Quantitative Linguistics Lab)
#           Jordi Girona St 1-3, Campus Nord UPC, 08034 Barcelona.   CATALONIA, SPAIN
#           Webpage: https://cqllab.upc.edu/people/lalemany/
#
###########################################################################

# ==============
# BUILDING RULES
# ==============

# ------------
# ENUMERATIONS

# treebank_error module
$(TREEBANK_ERR_INSTALL_SO_FILE): $(TREEBANK_ERR_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(TREEBANK_ERR_WRAP).o: $(TREEBANK_ERR_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(TREEBANK_ERR_WRAP).cxx: $(TREEBANK_ERR_MOD_DEPS) $(TREEBANK_ERR_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -I$(LAL_INC_DIR) -Wall -c++ -python -py3 -o $(TREEBANK_ERR_WRAP).cxx $(TREEBANK_ERR_MAIN_INT)
	scripts/postprocess_interface_file.sh $(TREEBANK_ERR_INSTALL_PY_FILE) | sed "s/^/    /g"

$(TREEBANK_ERR_INSTALL_PY_FILE): $(TREEBANK_ERR_MOD_DEPS) $(TREEBANK_ERR_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(TREEBANK_ERR_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(TREEBANK_ERR_WRAP).cxx $(TREEBANK_ERR_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(TREEBANK_ERR_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# treebank_feature module
$(TREEBANK_FEATURE_INSTALL_SO_FILE): $(TREEBANK_FEATURE_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(TREEBANK_FEATURE_WRAP).o: $(TREEBANK_FEATURE_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(TREEBANK_FEATURE_WRAP).cxx: $(TREEBANK_FEATURE_MOD_DEPS) $(TREEBANK_FEATURE_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(TREEBANK_FEATURE_WRAP).cxx $(TREEBANK_FEATURE_MAIN_INT)
	scripts/postprocess_interface_file.sh $(TREEBANK_FEATURE_INSTALL_PY_FILE) | sed "s/^/    /g"

$(TREEBANK_FEATURE_INSTALL_PY_FILE): $(TREEBANK_FEATURE_MOD_DEPS) $(TREEBANK_FEATURE_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(TREEBANK_FEATURE_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(TREEBANK_FEATURE_WRAP).cxx $(TREEBANK_FEATURE_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(TREEBANK_FEATURE_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# syntactic dependency structure type module
$(SYN_DEP_STR_INSTALL_SO_FILE): $(SYN_DEP_STR_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(SYN_DEP_STR_WRAP).o: $(SYN_DEP_STR_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(SYN_DEP_STR_WRAP).cxx: $(SYN_DEP_STR_MOD_DEPS) $(SYN_DEP_STR_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(SYN_DEP_STR_WRAP).cxx $(SYN_DEP_STR_MAIN_INT)
	scripts/postprocess_interface_file.sh $(SYN_DEP_STR_INSTALL_PY_FILE) | sed "s/^/    /g"

$(SYN_DEP_STR_INSTALL_PY_FILE): $(SYN_DEP_STR_MOD_DEPS) $(SYN_DEP_STR_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(SYN_DEP_STR_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(SYN_DEP_STR_WRAP).cxx $(SYN_DEP_STR_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(SYN_DEP_STR_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# type module
$(TREE_TYPE_INSTALL_SO_FILE): $(TREE_TYPE_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(TREE_TYPE_WRAP).o: $(TREE_TYPE_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(TREE_TYPE_WRAP).cxx: $(TREE_TYPE_MOD_DEPS) $(TREE_TYPE_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(TREE_TYPE_WRAP).cxx $(TREE_TYPE_MAIN_INT)
	scripts/postprocess_interface_file.sh $(TREE_TYPE_INSTALL_PY_FILE) | sed "s/^/    /g"

$(TREE_TYPE_INSTALL_PY_FILE): $(TREE_TYPE_MOD_DEPS) $(TREE_TYPE_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(TREE_TYPE_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(TREE_TYPE_WRAP).cxx $(TREE_TYPE_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(TREE_TYPE_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# algorithms_C module
$(ALG_C_INSTALL_SO_FILE): $(ALG_C_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(ALG_C_WRAP).o: $(ALG_C_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(ALG_C_WRAP).cxx: $(ALG_C_MOD_DEPS) $(ALG_C_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ALG_C_WRAP).cxx $(ALG_C_MAIN_INT)
	scripts/postprocess_interface_file.sh $(ALG_C_INSTALL_PY_FILE) | sed "s/^/    /g"

$(ALG_C_INSTALL_PY_FILE): $(ALG_C_MOD_DEPS) $(ALG_C_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(ALG_C_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ALG_C_WRAP).cxx $(ALG_C_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(ALG_C_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# algorithms_Dmin module
$(ALG_DMIN_INSTALL_SO_FILE): $(ALG_DMIN_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(ALG_DMIN_WRAP).o: $(ALG_DMIN_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(ALG_DMIN_WRAP).cxx: $(ALG_DMIN_MOD_DEPS) $(ALG_DMIN_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ALG_DMIN_WRAP).cxx $(ALG_DMIN_MAIN_INT)
	scripts/postprocess_interface_file.sh $(ALG_DMIN_INSTALL_PY_FILE) | sed "s/^/    /g"

$(ALG_DMIN_INSTALL_PY_FILE): $(ALG_DMIN_MOD_DEPS) $(ALG_DMIN_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(ALG_DMIN_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ALG_DMIN_WRAP).cxx $(ALG_DMIN_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(ALG_DMIN_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# algorithms_Dmin_planar module
$(ALG_DMIN_PL_INSTALL_SO_FILE): $(ALG_DMIN_PL_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(ALG_DMIN_PL_WRAP).o: $(ALG_DMIN_PL_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(ALG_DMIN_PL_WRAP).cxx: $(ALG_DMIN_PL_MOD_DEPS) $(ALG_DMIN_PL_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ALG_DMIN_PL_WRAP).cxx $(ALG_DMIN_PL_MAIN_INT)
	scripts/postprocess_interface_file.sh $(ALG_DMIN_PL_INSTALL_PY_FILE) | sed "s/^/    /g"

$(ALG_DMIN_PL_INSTALL_PY_FILE): $(ALG_DMIN_PL_MOD_DEPS) $(ALG_DMIN_PL_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(ALG_DMIN_PL_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ALG_DMIN_PL_WRAP).cxx $(ALG_DMIN_PL_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(ALG_DMIN_PL_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# algorithms_Dmin_projective module
$(ALG_DMIN_PR_INSTALL_SO_FILE): $(ALG_DMIN_PR_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(ALG_DMIN_PR_WRAP).o: $(ALG_DMIN_PR_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(ALG_DMIN_PR_WRAP).cxx: $(ALG_DMIN_PR_MOD_DEPS) $(ALG_DMIN_PR_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ALG_DMIN_PR_WRAP).cxx $(ALG_DMIN_PR_MAIN_INT)
	scripts/postprocess_interface_file.sh $(ALG_DMIN_PR_INSTALL_PY_FILE) | sed "s/^/    /g"

$(ALG_DMIN_PR_INSTALL_PY_FILE): $(ALG_DMIN_PR_MOD_DEPS) $(ALG_DMIN_PR_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(ALG_DMIN_PR_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ALG_DMIN_PR_WRAP).cxx $(ALG_DMIN_PR_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(ALG_DMIN_PR_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# -----
# TYPES

# types module
$(TYPES_INSTALL_SO_FILE): $(TYPES_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(TYPES_WRAP).o: $(TYPES_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(TYPES_WRAP).cxx: $(TYPES_MOD_DEPS) $(TYPES_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(TYPES_WRAP).cxx $(TYPES_MAIN_INT)
	scripts/postprocess_interface_file.sh $(TYPES_INSTALL_PY_FILE) | sed "s/^/    /g"

$(TYPES_INSTALL_PY_FILE): $(TYPES_MOD_DEPS) $(TYPES_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(TYPES_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(TYPES_WRAP).cxx $(TYPES_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(TYPES_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# ----------
# NAMESPACES

# generate
$(GENERATE_INSTALL_SO_FILE): $(GENERATE_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(GENERATE_WRAP).o: $(GENERATE_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(GENERATE_WRAP).cxx: $(GENERATE_MOD_DEPS) $(GENERATE_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(GENERATE_WRAP).cxx $(GENERATE_MAIN_INT)
	scripts/postprocess_interface_file.sh $(GENERATE_INSTALL_PY_FILE) | sed "s/^/    /g"

$(GENERATE_INSTALL_PY_FILE): $(GENERATE_MOD_DEPS) $(GENERATE_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(GENERATE_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(GENERATE_WRAP).cxx $(GENERATE_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(GENERATE_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# graphs module
$(GRAPHS_INSTALL_SO_FILE): $(GRAPHS_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(GRAPHS_WRAP).o: $(GRAPHS_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(GRAPHS_WRAP).cxx: $(GRAPHS_MOD_DEPS) $(GRAPHS_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(GRAPHS_WRAP).cxx $(GRAPHS_MAIN_INT)
	scripts/postprocess_interface_file.sh $(GRAPHS_INSTALL_PY_FILE) | sed "s/^/    /g"

$(GRAPHS_INSTALL_PY_FILE): $(GRAPHS_MOD_DEPS) $(GRAPHS_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(GRAPHS_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(GRAPHS_WRAP).cxx $(GRAPHS_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(GRAPHS_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# io module
$(IO_INSTALL_SO_FILE): $(IO_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(IO_WRAP).o: $(IO_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(IO_WRAP).cxx: $(IO_MOD_DEPS) $(IO_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(IO_WRAP).cxx $(IO_MAIN_INT)
	scripts/postprocess_interface_file.sh $(IO_INSTALL_PY_FILE) | sed "s/^/    /g"

$(IO_INSTALL_PY_FILE): $(IO_MOD_DEPS) $(IO_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(IO_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(IO_WRAP).cxx $(IO_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(IO_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# iterators module
$(ITERATORS_INSTALL_SO_FILE): $(ITERATORS_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(ITERATORS_WRAP).o: $(ITERATORS_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(ITERATORS_WRAP).cxx: $(ITERATORS_MOD_DEPS) $(ITERATORS_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ITERATORS_WRAP).cxx $(ITERATORS_MAIN_INT)
	scripts/postprocess_interface_file.sh $(ITERATORS_INSTALL_PY_FILE) | sed "s/^/    /g"

$(ITERATORS_INSTALL_PY_FILE): $(ITERATORS_MOD_DEPS) $(ITERATORS_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(ITERATORS_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ITERATORS_WRAP).cxx $(ITERATORS_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(ITERATORS_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# linarr module
$(LINARR_INSTALL_SO_FILE): $(LINARR_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(LINARR_WRAP).o: $(LINARR_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(LINARR_WRAP).cxx: $(LINARR_MOD_DEPS) $(LINARR_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(LINARR_WRAP).cxx $(LINARR_MAIN_INT)
	scripts/postprocess_interface_file.sh $(LINARR_INSTALL_PY_FILE) | sed "s/^/    /g"

$(LINARR_INSTALL_PY_FILE): $(LINARR_MOD_DEPS) $(LINARR_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(LINARR_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(LINARR_WRAP).cxx $(LINARR_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(LINARR_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# numeric module
$(NUMERIC_INSTALL_SO_FILE): $(NUMERIC_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(NUMERIC_WRAP).o: $(NUMERIC_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(NUMERIC_WRAP).cxx: $(NUMERIC_MOD_DEPS) $(NUMERIC_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(NUMERIC_WRAP).cxx $(NUMERIC_MAIN_INT)
	scripts/postprocess_interface_file.sh $(NUMERIC_INSTALL_PY_FILE) | sed "s/^/    /g"

$(NUMERIC_INSTALL_PY_FILE): $(NUMERIC_MOD_DEPS) $(NUMERIC_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(NUMERIC_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(NUMERIC_WRAP).cxx $(NUMERIC_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(NUMERIC_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# properties module
$(PROPERTIES_INSTALL_SO_FILE): $(PROPERTIES_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(PROPERTIES_WRAP).o: $(PROPERTIES_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(PROPERTIES_WRAP).cxx: $(PROPERTIES_MOD_DEPS) $(PROPERTIES_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(PROPERTIES_WRAP).cxx $(PROPERTIES_MAIN_INT)
	scripts/postprocess_interface_file.sh $(PROPERTIES_INSTALL_PY_FILE) | sed "s/^/    /g"
$(PROPERTIES_INSTALL_PY_FILE): $(PROPERTIES_MOD_DEPS) $(PROPERTIES_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(PROPERTIES_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(PROPERTIES_WRAP).cxx $(PROPERTIES_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(PROPERTIES_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# utilities module
$(UTILS_INSTALL_SO_FILE): $(UTILS_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(UTILS_WRAP).o: $(UTILS_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(UTILS_WRAP).cxx: $(UTILS_MOD_DEPS) $(UTILS_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(UTILS_WRAP).cxx $(UTILS_MAIN_INT)
	scripts/postprocess_interface_file.sh $(UTILS_INSTALL_PY_FILE) | sed "s/^/    /g"

$(UTILS_INSTALL_PY_FILE): $(UTILS_MOD_DEPS) $(UTILS_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(UTILS_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(UTILS_WRAP).cxx $(UTILS_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(UTILS_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# version module
$(VERSION_INSTALL_SO_FILE): $(VERSION_WRAP).o $(LIBRARY_SHARED_DEP)
	$(CXX) $(LFLAGS) $(FLAGS) -shared -o $@ $< $(LIBS)
$(VERSION_WRAP).o: $(VERSION_WRAP).cxx
	$(CXX) $(FLAGS) -o $@ -c $< $(INCLUDES)
$(VERSION_WRAP).cxx: $(VERSION_MOD_DEPS) $(VERSION_MAIN_INT)
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(VERSION_WRAP).cxx $(VERSION_MAIN_INT)
	scripts/postprocess_interface_file.sh $(VERSION_INSTALL_PY_FILE) | sed "s/^/    /g"

$(VERSION_INSTALL_PY_FILE): $(VERSION_MOD_DEPS) $(VERSION_MOD_DOCS) $(DOCUMENTATION_FILE)
ifeq (,$(wildcard $(VERSION_WRAP).cxx))
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(VERSION_WRAP).cxx $(VERSION_MAIN_INT)
else
	$(SWIG_EXE) $(SWIG_FLAGS) -Wall -c++ -python -py3 -o $(ARCH_DIR)/$(INTERFACE_DIRECTORY)/temp.cxx $(VERSION_MAIN_INT)
endif
	scripts/postprocess_interface_file.sh $@ | sed "s/^/    /g"

# __init__.py file
$(ARCH_DIR)/$(INTERFACE_DIRECTORY)/__init__.py:
	cat modules_pydocs/lal.py modules/$(INTERFACE_DIRECTORY).py > $@
